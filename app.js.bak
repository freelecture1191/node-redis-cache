const createError = require('http-errors');
const express = require('express');
const path = require('path');

const cookieParser = require('cookie-parser');
const logger = require('morgan');
const sassMiddleware = require('node-sass-middleware');
const fs = require('fs');

const redis = require('redis');
const session = require('express-session');
const connectRedis = require('connect-redis');

const redisConfig = {
  "host": "localhost",
  "port": 6379,
  "prefix": "session:",
  "db": 0,
  "client": redis.createClient(6379,"localhost"),
  "logErrors": true
}
const RedisStore = connectRedis(session);
const sess = {
  resave: false,
  saveUninitialized: true,
  secret: new Date().getMilliseconds()+"brokim",
  store: new RedisStore(redisConfig),
  name: 'redis-session',
  cookie: {
    maxAge : 1000 * 60 * 3,
    httpOnly: true,
    secure: false
  }
};


var indexRouter = require('./routes');
var redisRouter = require('./routes/redis/redis');
var usersRouter = require('./routes/users/users');

const app = express();

app.use(session(sess));
// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(sassMiddleware({
  src: path.join(__dirname, 'public'),
  dest: path.join(__dirname, 'public'),
  indentedSyntax: true, // true = .sass and false = .scss
  sourceMap: true
}));

app.use('/', indexRouter);
app.use('/redis', redisRouter);
app.use('/users', usersRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
